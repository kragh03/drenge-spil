PolygonMorph subclass: #SpaceMorph	instanceVariableNames: 'vel rotation angle world isDead '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Asteroids'!!SpaceMorph commentStamp: 'BRD 3/4/2002 17:32' prior: 0!This class represents a generic space object, endowed with alifespan, velocity, and rotation.!!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/19/2002 22:53'!die	isDead _ true! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/19/2002 22:53'!isDead	^isDead! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/18/2002 22:17'!printString	^ (super printString) , ' pos=' , (self position printString) , ' vel=' , (vel printString)! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/18/2002 21:44'!rotation	^ rotation! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/18/2002 21:44'!rotation: x	rotation _ x! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/18/2002 21:38'!vel	^ vel! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/18/2002 21:38'!vel: newVel	vel _ newVel! !!SpaceMorph methodsFor: 'access' stamp: 'BRD 2/19/2002 22:25'!world: aWorld	world _ aWorld.! !!SpaceMorph methodsFor: 'initialization' stamp: 'BRD 3/4/2002 17:17'!init: boundsRect	" creates a randomly sized blob within the given bounds "	| dim x y |	isDead _ false.	vel _ (10 atRandom - 5) @ (10 atRandom - 5).	rotation _ 20 atRandom - 10.	angle _ 360 atRandom.	dim _ 30 atRandom + 10.	x _ ((boundsRect left - boundsRect right) atRandom) + boundsRect left.	y _ ((boundsRect bottom - boundsRect top) atRandom) + boundsRect top.	self vertices: (Array with: x @  (y - dim)                               with: (x + dim) @ y                              with: x @ (y + dim)						 									with: (x - dim) @ y)               color: Color random borderWidth: 1 borderColor: Color random! !!SpaceMorph methodsFor: 'collision' stamp: 'BRD 2/19/2002 23:34'!checkBlobCollisions: blobs	self checkCollisions: blobs 			collideBlock: [ :me :other | 				me collide: other.				blobs remove: me ]			terminate: true		! !!SpaceMorph methodsFor: 'collision' stamp: 'BRD 2/19/2002 23:32'!checkCollisions: blobs collideBlock: block terminate: shouldStop	"Check for collisions against other blobs.  the collideBlock is evaluated	with self and  collider as arguments.  if terminate is true, then the	collision dectection short-circuits after the first collision."	blobs do: [ :aBlob |		(self ~= aBlob and: [ self bounds intersects: aBlob bounds]) 		ifTrue: [ 			block value: self value: aBlob.			shouldStop ifTrue: [ ^self ] ] ].	! !!SpaceMorph methodsFor: 'collision' stamp: 'BRD 2/28/2002 15:31'!collide: other	"if a morph collides with another, it trades velocities"	| temp |	temp _ vel.	vel _ other vel.	other vel: temp.	temp _ rotation.	rotation _ other rotation.	other rotation: temp.	! !!SpaceMorph methodsFor: 'stepping' stamp: 'BRD 2/28/2002 15:55'!step	| b |	b _ world bounds.	self position: (self position + vel) \\ (b bottomRight).	angle _ angle + rotation.	self rotationDegrees: angle.	! !!SpaceMorph methodsFor: 'stepping' stamp: 'BRD 2/28/2002 16:04'!stepTime	^0! !SpaceMorph subclass: #BulletMorph	instanceVariableNames: 'cycles '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Asteroids'!!BulletMorph commentStamp: 'BRD 3/4/2002 17:35' prior: 0!Like a regular SpaceMorph, except that it has a limited lifetime.When its lifetime ends, it dies.!!BulletMorph methodsFor: 'initialization' stamp: 'BRD 3/4/2002 17:28'!world: aWorld vel: velocity angle: degrees pos: aPoint	" initialize a bullet with the given values "	| x y|	world _ aWorld.	isDead _ false.	cycles _ 50.	vel _ velocity.	angle _ degrees.	x _ aPoint x.	y _ aPoint y.	rotation _ 0.	self vertices: (Array with: x @  y                        with: (x - 8) @ (y + 3)                        with: (x - 8) @ (y - 3))             color: Color red borderWidth: 1 borderColor: Color black! !!BulletMorph methodsFor: 'stepping' stamp: 'BRD 3/4/2002 17:33'!step	" just do the standard step, but then decrement my lifespan "	super step.	cycles _ cycles - 1.	cycles <= 0 ifTrue: [ self die ].! !SpaceMorph subclass: #ShipMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Asteroids'!!ShipMorph commentStamp: 'BRD 3/4/2002 17:35' prior: 0!Like a regular SpaceMorph, except that it has a triangular shapeand can handle keyboard events.!!ShipMorph methodsFor: 'as yet unclassified' stamp: 'BRD 2/28/2002 16:03'!handle: anEvent	| ch |	ch _ anEvent keyCharacter.	"Transcript show: 'angle='; show: angle; show: ' vel='; show: vel; cr."	(ch = $j) ifTrue: [ angle _ angle - 10 ].	(ch = $k) ifTrue: [ vel _ vel + (Point r: 2 degrees: angle) ].	(ch = $l) ifTrue: [ angle _ angle + 10 ].	(ch = $ ) ifTrue: [ self shoot ]	! !!ShipMorph methodsFor: 'as yet unclassified' stamp: 'BRD 2/28/2002 15:55'!init	| x y|	vel _ 0@-1.	angle _ 90.	x _ 300.	y _ 300.	rotation _ 0.	self vertices: (Array with: x @  y                        with: (x - 30) @ (y + 10)                        with: (x - 30) @ (y - 10))             color: Color random borderWidth: 1 borderColor: Color random! !!ShipMorph methodsFor: 'as yet unclassified' stamp: 'BRD 2/28/2002 16:05'!shoot	| bullet velocity |	bullet _ BulletMorph new.	velocity _ Point r: 20 degrees: angle.	bullet world: world vel: velocity angle: angle pos: (self position + 10@10).	world addBullet: bullet.! !Morph subclass: #WorldMorph	instanceVariableNames: 'blobs ship bullets '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Asteroids'!!WorldMorph commentStamp: 'BRD 3/4/2002 17:40' prior: 0!This class represents the world in which all game objectslive.  It maintains collections of blobs, which are randomobjects that float around in space, and a collection ofbullets, which are things that might destroy blobs.  Italso contains a single ship which flies around.Version: 0.9!!WorldMorph methodsFor: 'event handling' stamp: 'BRD 2/19/2002 23:45'!handlesKeyboard: anEvent	^true	! !!WorldMorph methodsFor: 'event handling' stamp: 'BRD 3/4/2002 17:10'!keyStroke: anEvent	"I handle the quit key, the ship handles the other events"	| ch |	ch _ anEvent keyCharacter.	ch = $q ifTrue: [ self delete ]          ifFalse: [ ship handle: anEvent ].	self changed.	! !!WorldMorph methodsFor: 'adding' stamp: 'BRD 3/4/2002 17:20'!addBlobs: count	" add count many random blobs to myself "	| a |	count timesRepeat: [		a _ SpaceMorph new init: self bounds.		self addMorph: a.		blobs add: a.		a world: self ].! !!WorldMorph methodsFor: 'adding' stamp: 'BRD 2/28/2002 16:02'!addBullet: aBullet	self addMorph: aBullet.	bullets add: aBullet.! !!WorldMorph methodsFor: 'adding' stamp: 'BRD 2/28/2002 16:02'!addShip: aShip	self addMorph: aShip.	ship _ aShip.	aShip world: self.! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 2/19/2002 23:35'!checkBlobCollisions	| theBlobs |	theBlobs _ blobs copy.	blobs do: [ :aBlob | aBlob checkBlobCollisions: theBlobs ].! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 2/19/2002 23:39'!checkBulletCollisions	| theBullets  |	theBullets _ bullets copy.	blobs do: [ :aBlob | 		aBlob checkCollisions: theBullets					collideBlock: [ :blob :bullet |						blob die.						bullet die.						theBullets remove: bullet. ]					terminate: true ]! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 2/19/2002 22:54'!reapBlobs		blobs do: [ :aBlob | aBlob isDead ifTrue: [ aBlob delete]].		blobs _ blobs reject: [ :aBlob | aBlob isDead ]! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 3/4/2002 17:31'!reapBullets	"iterate over the bullets collection, reaping 'dead' bullets "		bullets do: [ :aBullet | aBullet isDead ifTrue: [ aBullet delete]].		bullets _ bullets select: [ :aBullet | aBullet isDead not ]! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 2/28/2002 16:02'!step	"main method for running simulation"	super step.	self checkBlobCollisions.	self checkBulletCollisions.	self reapBullets.	self reapBlobs.	! !!WorldMorph methodsFor: 'stepping' stamp: 'BRD 2/28/2002 15:27'!stepTime	"step as fast as possible"	^ 0	! !!WorldMorph methodsFor: 'initialization' stamp: 'BRD 3/4/2002 17:10'!initialize  | msg |	msg _ ' Keys:  q=quit space=fire k=thrust j=turn left l=turn right '.	super initialize.	self color: Color white.	self extent: 500@500. 	self addMorph: (ImageMorph fromString: msg).	blobs _ OrderedCollection new.	bullets _ OrderedCollection new.	self clipSubmorphs: true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WorldMorph class	instanceVariableNames: ''!!WorldMorph class methodsFor: 'testing' stamp: 'BRD 3/4/2002 16:58'!test	| m s |	m _ self new initialize.		m addBlobs: 20.	s _ ShipMorph new init.	m addShip: s.	m openInWorld.! !